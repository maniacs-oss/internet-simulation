syntax = "proto2";
package schema.improbable.player.controls;

import "improbable/entity_state.proto";

import "improbable/math/coordinates.proto";

// Events
message BuildTheInternet {
    optional int32 internetType = 1;
}
     
message CreateRoute {
    optional improbable.math.Coordinates pos1 = 1;
  optional improbable.math.Coordinates pos2 = 2;
}
     
message CreateFlow {
    optional improbable.math.Coordinates pos1 = 1;
  optional improbable.math.Coordinates pos2 = 2;
}
     
message KillNetwork {
    optional improbable.math.Coordinates position = 1;
}
     
message CreateNetwork {
    optional int32 edgeCount = 1;
  optional int32 edgeThroughput = 2;
}
     
// Player controls values
message PlayerControlsStateData {
  repeated BuildTheInternet buildTheInternet = 1000 [(improbable.state_event) = true];
  repeated CreateRoute createRoute = 1001 [(improbable.state_event) = true];
  repeated CreateFlow createFlow = 1002 [(improbable.state_event) = true];
  repeated KillNetwork killNetwork = 1003 [(improbable.state_event) = true];
  repeated CreateNetwork createNetwork = 1004 [(improbable.state_event) = true];
}

extend improbable.EntityState {
  optional PlayerControlsStateData playerControlsState = 1000
    [(improbable.entity_state_options) = {
      state_synchronized: true
      state_queryable: false
    }];
}
     